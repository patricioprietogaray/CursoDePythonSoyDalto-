# PRINCIPIOS SOLID
# 
# HASTA DONDE VA A LLEGAR EL CÓDIGO QUE ESTOY ESCRIBIENDO????
# ES DECIR....
# EL CODIGO QUE ESTOY ARMANDO AHORA, QUE ESTOY DESARROLLANDO
# ES UN CODIGO QUE REALMENTE VA A DURAR???
# QUE SERA TRABAJADO PARA UNA EMPRESA QUE VA A GANAR MUCHO DINERO???
# ES UN SOFTWARE QUE VOY A QUERER ESCALAR EN EL FUTURO????
# ES UN PROYECTO DE PRUEBA???? ES ALGO TRANQUI?????
# SI APUNTA A QUE DURE VAMOS A HACER QUE EL CODIGO APUENTE A CRECER
# NOS CUESTE MENOS PLATA Y OTRAS CUESTIONES MAS
# POR EJEMPLO SI PYTHON CAMBIA LA VERSION ENTONCES DEBEREMOS ADAPTARNOS 
# A LA NUEVA VERSION.
# SI UNA LIBRERIA DEJA DE FUNCIONAR NOS DEBEREMOS ADAPTAR A DICHO CAMBIO
# PARA QUE EL PROGRAMA NO FALLE Y READAPTARLO A LA NUEVA VERSION DE LA LIBRERIA.
# O SI UN MODULO SE VUELVE OBSOLETO BUSCAR LA MANERA DE REEMPLAZAR DICHA FUNCIONALIDAD
# CON OTRO MODULO.    
# 
# MANTENIBLE: EL CODIGO DEBE ESTAR BIEN ORGANIZADO, 
# DEBERA TENER UNA ESTRUCTURA CLARA, Y SEGUIR BUENAS PRACTICAS,
# EL CODIGO DEBE SER FACIL Y MANTENIBLE EN EL TIEMPO
# 
# REUSABILIDAD - REUTILIZABILIDAD: PODER REUTILIZAR CODIGO
# EL SOFTWARE DEBE ESTAR DEFINIDO DE TAL FORMA QUE TODOS LOS COMPONENTES
# DEBEN SER REUTILIZABLES.
# LOS MODULOS, CLASES Y FUNCIONES DEBEN SER INDEPENDIENTES PARA PODER
# UTILIZARLOS EN OTROS PROYECTOS TOTALMENTE DISTINTOS  
# SIN NECESIDAD DE AGREGAR COSAS EXTRAS
# CUANDO SE USAN LOS COMPONENTES AHORRAMOS UN MONTON DE 
# TIEMPO DE DESARROLLO INNECESARIO PORQUE EXISTEN DICHOS
# COMPONENTES (QUE SE IMPORTAN) 
# Y EVITAR LA DUPLICACION INNECESARIA DEL CODIGO

# LEGIBILIDAD:  EL CODIGO DEBE SER FACIL DE ENTENDER
# PARA CUALQUIER DESARROLLADOR QUE QUIERA LEERLO, 
# POR EJEMPLO NOMBRES DE VARIABLES QUE TENGAN UN 
# SIGNIFICADO Y QUE SEA INTUITIVO, COMENTAR
# CUANDO SEA NECESARIO, COMENTAR TODO.
# 
# EXTENSIBILIDAD: EL SOFTWARE DEBE PERMITIR QUE 
# EN EL FUTURO SE EXTIENDA SIN NECESIDAD DE AFECTAR
# SU FUNCIONAMIENTO, ES DECIR, SIN NECESIDAD DE 
# AFECTAR EL CODIGO QUE YA EXISTE
# 
# PRINCIPIOS SOLID (SIGLAS) PARA LA PROGRAMACION
# ORIENTADAS A OBJETOS
# 
# 
# S:  SRP: PRINCIPIO DE RESPONSABILIDAD ÚNICO
# O:  OCP: PRINCIPIO DE ABIERTO / CERRADO
# L:  LSP: PRINCIPIO DE SUSTITUCION DE LISKOV
# I:  ISP: PRINCIPIO DE SEGREGACION DE INTERFAZ
# D:  DIP: PRINCIPIO DE INVERSION DE DEPENDENCIAS
# 
#   ....
#    ...
#   ....